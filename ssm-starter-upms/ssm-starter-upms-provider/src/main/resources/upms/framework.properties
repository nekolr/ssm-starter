########################################################## DataSource ##########################################################
# DataSource 驱动全类名
framework.datasource.driverClass = com.mysql.jdbc.Driver
# DataSource 连接，一定要带着 tinyInt1isBit=false，将 boolean 数据映射成 tinyint(1)
framework.datasource.url = jdbc:mysql://127.0.0.1:3306/upms?useUnicode=true&characterEncoding=utf-8&useSSL=false&tinyInt1isBit=false
# DataSource 用户名
framework.datasource.username = root
# DataSource 密码
framework.datasource.password = OHcy78fm44CN1UjPTTPkoQ==
# DataSource 初始化连接数
framework.datasource.initialSize = 1
# DataSource 最小连接数
framework.datasource.minIdle = 1
# DataSource 最大连接数
framework.datasource.maxActive = 20
# DataSource 最长等待时间
framework.datasource.maxWait = 60000
# DataSource 检测连接有效间隔
framework.datasource.timeBetweenEvictionRunsMillis = 60000
# DataSource 连接最小生存时间
framework.datasource.minEvictableIdleTimeMillis = 300000
# DataSource 检测连接是否有效的查询语句
framework.datasource.validationQuery = SELECT 1
# DataSource 如果空闲时间大于 timeBetweenEvictionRunsMillis，执行 validationQuery 检测连接是否有效
framework.datasource.testWhileIdle = true
# DataSource 申请连接时执行 validationQuery 检测连接是否有效
framework.datasource.testOnBorrow = false
# DataSource 连接返回时执行 validationQuery 检测连接是否有效
framework.datasource.testOnReturn = false
# DataSource 预编译缓存是否开启
framework.datasource.poolPreparedStatements = true
# DataSource 预编译缓存个数
framework.datasource.maxPoolPreparedStatementPerConnectionSize = 20
# DataSource 配置监控统计的 Filter
framework.datasource.filters = stat

##########################################################  MyBatis  ###########################################################
# MyBatis 启用缓存
framework.mybatis.cacheEnabled = true
# MyBatis 懒加载
framework.mybatis.lazyLoadingEnabled = true
# MyBatis 对于未知的 SQ L查询，允许返回不同的结果集以达到通用的效果
framework.mybatis.multipleResultSetsEnabled = true
# MyBatis 允许使用列标签代替列名
framework.mybatis.useColumnLabel = true
# MyBatis 是否允许自定义生成主键
framework.mybatis.useGeneratedKeys = false
# MyBatis 给予被嵌套的 resultMap 以字段-属性的映射支持 FULL,PARTIAL
framework.mybatis.autoMappingBehavior = PARTIAL
# MyBatis 对于批量更新操作缓存 SQL 以提高性能 BATCH,SIMPLE
framework.mybatis.defaultExecutorType = SIMPLE
# MyBatis Allows using RowBounds on nested statements
framework.mybatis.safeRowBoundsEnabled = false
# MyBatis Enables automatic mapping from classic database column names A_COLUMN to camel case classic Java property names aColumn.
framework.mybatis.mapUnderscoreToCamelCase = true
# MyBatis 缓存作用域
framework.mybatis.localCacheScope = SESSION
# MyBatis null 类型
framework.mybatis.jdbcTypeForNull = NULL
# MyBatis 触发延迟加载的方法
framework.mybatis.lazyLoadTriggerMethods = equals,clone,hashCode,toString
# MyBatis 设置关联对象加载的形态，此处为按需加载字段（加载字段由 SQL 指定），不会加载关联表的所有字段，以提高性能
framework.mybatis.aggressiveLazyLoading = false
# MyBatis 扫描包名
framework.mybatis.basePackage = com.nekolr.upms.provider.dao
# MyBatis typeAliases 包名，逗号分隔
framework.mybatis.typeAliasesPackage = com.nekolr.upms.api.entity
# MyBatis mapperLocations 映射
framework.mybatis.mapperLocations = classpath:com/nekolr/upms/provider/dao/mapper/*.xml

##########################################################  Redis  ###########################################################
# redis 服务地址
framework.redis.host = localhost
# redis 服务端口号
framework.redis.port = 6379
# redis 密码
framework.redis.password = exu4nM0eUWCl0n3os5398A==
# 使用的数据库索引
framework.redis.dbIndex = 0
# 检查连接有效性
framework.redis.validateConnection = true
# 事务支持
framework.redis.enableTransactionSupport = true
# 客户端命令超时时间，单位秒
framework.redis.commandTimeout = 2
# 客户端关闭超时时间，单位秒
framework.redis.shutdownTimeout = 0
# I/O 线程池大小
framework.redis.ioThreadPoolSize = 4
# 计算线程池大小
framework.redis.computationThreadPoolSize = 4

##########################################################  Shiro  ###########################################################
# shiro 过滤链忽略的 URIs，用逗号分隔（比如：/druid/**,/swagger-ui.html）
# /webjars/**,/swagger-ui.html 可以不用配置在这里，原因是在过滤链规则中没有设置它们，因此不会被 Shiro 拦截
framework.shiro.ignoredUris =

##########################################################  Swagger  ###########################################################
# 扫描要生成文档的包
framework.swagger.basePackage = com.nekolr.upms.server.controller
# 大标题
framework.swagger.title = ssm-starter 接口文档
# 描述
framework.swagger.description = ssm-starter 接口文档
# 版本号
framework.swagger.version = 0.0.1
# swagger host
framework.swagger.host = localhost:8080
# 开发者
framework.swagger.name = nekolr
# url
framework.swagger.url = https://nekolr.com
# 邮箱
framework.swagger.email = avalon@nekolr.com

##########################################################  Dubbo Consumer  ###########################################################
# 应用名称，用于注册中心计算应用间的依赖关系
framework.dubbo.consumer.applicationName = upms-consumer
# 日志策略
framework.dubbo.consumer.applicationLogger = slf4j
# 注册中心地址
framework.dubbo.consumer.registryAddress = zookeeper://127.0.0.1:2181
# 注册中心客户端实现，当注册中心使用 ZooKeeper 时可以配置
framework.dubbo.consumer.registryClient = curator
# 服务提供者端口号
framework.dubbo.consumer.protocolPort = 20881
# 服务提供者协议
framework.dubbo.consumer.protocol = dubbo
# 创建的 ZooKeeper 根节点名称
framework.dubbo.consumer.registryGroup = dubbo
# 服务提供者的服务版本号
framework.dubbo.consumer.registryVersion = 0.1
# 远程服务调用超时时间，单位毫秒
framework.dubbo.consumer.consumerTimeout = 1000
# Qos 服务端口号
framework.dubbo.consumer.qosPort = 22224

##########################################################  Dubbo Provider  ###########################################################
# 应用名称，用于注册中心计算应用间的依赖关系
framework.dubbo.provider.applicationName = upms-provider
# 日志策略
framework.dubbo.provider.applicationLogger = slf4j
# 注册中心地址
framework.dubbo.provider.registryAddress = zookeeper://127.0.0.1:2181
# 注册中心客户端实现，当注册中心使用 ZooKeeper 时可以配置
framework.dubbo.provider.registryClient = curator
# 创建的 ZooKeeper 根节点名称
framework.dubbo.provider.registryGroup = dubbo
# 服务提供者的服务版本号
framework.dubbo.provider.registryVersion = 0.1
# 服务提供者端口号
framework.dubbo.provider.protocolPort = 20881
# 服务提供者协议
framework.dubbo.provider.protocol = dubbo
# Qos 服务端口号
framework.dubbo.provider.qosPort = 22224